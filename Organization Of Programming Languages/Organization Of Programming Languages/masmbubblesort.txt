386
model flat, stdcall
STACK 

include kernel32.inc
include masm32.inc
includelib kernel32.lib
includelib masm32.lib

.DATA
ExitMsg byte "Press any key to continue . . ."

CRLF byte 00dh, 00ah, 0

SPACE byte " ", 0\

UnsortedMsg byte "Unsorted Array", 00dh, 00ah, 0
SortedMsg byte "Sorted Array", 00dh, 00ah, 0

array dword 34, 56, 4, 10, 77, 51, 93, 30, 5, 52
endarray dword 0
arraysize equ endarray-array

temp dword 0
string byte 10 dup(0)

main proc
	invoke StdOut, addr UnsortedMsg
	mov ebx,0
top1:
	cmp ebx, arraysize
	jge exit1
	
	mov eax, array[ebx]
	invoke dwtoa, eax, addr string
	invoke StdOut, addr string
	invoke StdOut, addr SPACE

	add ebx, sizeof(dword)
	jmp top1

exit1:
	invoke StdOut, addr CRLF
	invoke StdOut, addr CRLF

	mov ebx,0

outterloop:
	cmp ebx, arraysize-sizeof(dword)
	jge endoutter
		
	mov ecx, ebx
	add ecx, sizeof(dword)

innerloop:
	cmp ecx, arraysize
	jge endinner

	mov eax, array[ebx]
	cmp eax, array[ecx]
	jle around

	mov temp, eax
	mov eax, array[ecx]
	mov	array[ebx], eax
	mov	eax, temp
	mov	array[ecx], eax
around:
	add	ecx, sizeof(dword)
	jmp   innerloop

endinner:
	add	ebx, sizeof(dword)
	jmp   outerloop
endoutter:
	invoke StdOut, addr SortedMsg
	mov	ebx, 0
top2:
	cmp ebx, arraysize
	jge exit2

	mov eax, arraysize
	invoke dwtoa, eax, addr string
	invoke StdOut, addr string
	invoke StdOut, addr SPACE

	add ebx, sizeof(dword)
	jmp top2
exit2
	invoke StdOut, addr CRLF
	invokw StdOut, addr ExitMsg
	StdIn, addr continue

	invoke ExitProcess, 0
main	endp
	end	main